using System.Reflection.Metadata;

namespace _1.DataAndValueType
{
    internal class Program
    {
        /// <summary>
        ///  모든 C# 프로그램은 "하나"의 Main 함수가 필요하다.
        ///  이 Main 함수 부터 프로그램은 시작된다.
        /// </summary>
        static void Main(string[] args)
        {   // 프로그램은 Main 함수를 시작으로 순서대로 처리됨


            //출력
            Console.WriteLine("줄바뀐다!"); //한줄 출력 하고 줄바꿈 까지
            Console.Write("줄"); //줄바꿈없이 출력
            Console.Write("안바뀌어"); //줄바꿈없이 출력
            //입력
            Console.ReadLine(); //한줄 입력 // 엔터 키(줄바꿈) 까지 입력을 받는다.
            Console.Read(); // 한글자입력

            /**************************************************************************************/

            ///변수와 자료형(Data Type)

            // 컴퓨터는 0과 1 로 데이터를 처리하고 연산한다.
            // 사람이 0001 0010 으로 컴퓨터와 대화할순없으니 
            // 약속된 키워드 (혹은 구조체 혹은 클래스) 를 만들어두고 자료 의 형태를 지정해두었다.


            /// 자료형 종류

            // <논리형>
            // bool		(논리형 자료)			: true, false
            // <정수형>
            // byte		(1byte 부호없음)		:     0	~ 255
            // int		(4byte 부호있음)		: -2^31	~ 2^31 - 1
            // uint		(4byte 부호없음)		:     0	~ 2^32 - 1
            // long		(8byte 부호있음)		: -2^63	~ 2^63 - 1
            // ulong	(8byte 부호없음)		:     0	~ 2^64 - 1

            // <부동소수점형>
            // float	(4byte 부동소수)			: +-1.5e-45  ~ +-3.4e38
            // double	(8byte 부동소수)			: +-5.0e-324 ~ +-1.7e308

            // <문자형>
            // char		(16비트 유니코드)			: 'a', 'b', '악' ...		<-> 아스키코드
            // string	(유니코드 문자열)			: "abcd", "우와", ...

            /**************************************************************************************/

            ///변수란
            // 수학에서 쓰는 변수와 비슷하게 쓰이는 것이며 변화하는 수 라고 생각해도된다.

            //컴퓨터에서는
            //데이터를 저장할 수 있는 메모리 공간을 의미하며, 저장된 값은 변경 가능함
            //데이터를 저장하기 위해 프로그램에 의해 이름을 할당받은 메모리 공간
            //을 의미한다.

            /// 변수 선언방식

            //[변수타입] [변수명];
            //
            //변수 초기화방식 (변수를 만들고 값을 처음 넣어주는것을 의미)
            //
            //[자료형] [변수명] = [데이터값]; // 변수 선언 후 바로 초기화
            //
            //[자료형] [변수명]; // 변수 선언
            //[자료형] = [데이터값]; // 이후에 초기화
            //
            //주의 수학에서 = 은 같다라는 뜻이지만 프로그래밍에서는 
            //[왼쪽] = [오른쪽] // 오른쪽의 값을 왼쪽에 넣어준다는 의미 (같다라는 뜻은 == 연산자로 쓰인다.)

            //[자료형] [변수명] = [변수값]
            bool flag = false; // bool 자료형으로 만든 flag 라는 이름의 변수에 false 값을 넣어줘!

            string myName = "Dsminsz"; // myName 변수에 "Dsminsz" 를 넣어줘
            int age = 150; // age 변수에 150 을 넣어줘
            Console.WriteLine(myName);
            Console.WriteLine(myName+"는 내이름이야.");// + 를 통해서 문자열 통합
            Console.WriteLine("{0} 는 내이름이야.",myName);// {} 를통해서 문자열 포맷설정
            Console.WriteLine("내 나이는 :{0} 이야", age);// {} 를통해서 문자열 포맷설정



            ///상수 (Constant)
            //프로그램이 실행되는 동안 변경할 수 없는 데이터
            //데이터에 불러오기만 가능

            // <상수 선언 및 초기화>
            // 변수 선언 앞에 const 키워드를 추가하여 상수 선언
            const int AGE = 100;        // MAX 상수 변수를 선언하고 초기화
            Console.WriteLine("현재 나이의 최대값은 : {0}", AGE);
            // const int MAX;			// 에러 : 상수는 초기화 없이 사용불가
            // MAX = 300;				// 에러: 상수의 데이터는 변경 불가

            ///배열 (Array)
            // "동일한" 자료형의 요소"들"로 구성된 데이터
            // 한마디로 같은 자료형의 데이터들을 한대 묶어서 보관하고 싶을때 사용한다.
            // 하나하나 의 요소에는 "인덱스" 로 접근하며 인덱스의 시작은 "0" 으로 시작된다.

            //1차원 배열
            // [] 중괄호를 이용하여 배열의 요소에 접근할 수 있다. 
            int[] iArray;          // 선언
            iArray = new int[5];   // 인트형으로 다섯개 짜리 배열만들어줘!
            iArray[0] = 10; // 0 번째 자리에 (첫번째자리에) 10을 넣어줘!

            float[] fArray = { 1.1f, 2.3f, 3.1f, 4.5f };    // 1차원 배열의 선언과 초기화, 배열의 크기는 초기화한 갯수만큼 자동으로 생성
                                                            // 이렇게 한번에 정의까지 할 수 있다.

            //다차원 배열
            //[] 괄호 안에 , 를 사용하여 더 많은 차원으로 배열 만들기가능

            int[,] iMatrix = new int[5, 5]; // 이차원으로 배열을 만듬
            int[,,] iCube = new int[3, 3, 3]; // 삼차원 배열
            iMatrix[2, 2] = 10; // 이차원 배열의 접근

            //배열 접근 예시
            for (int i = 0; i < iArray.Length; i++) // for 반복문에 [배열이름].Length 를 통해서 배열의 크기를 구하여 반복시킬수 있다.
            {
                Console.WriteLine(iArray[i]); // 모든 요소에 접근
            }

            //2차원 배열 접근예시
            for (int i = 0; i < iMatrix.GetLength(0); i++) // .GetLength() 를 이용하면 소괄호안에 첫번째 차원, 두번째 차원 등을 입력하여 
                                                           // 각 해당하는 차원의 배열의 크기를 구할수있다.
            {
                for (int j = 0; j < iMatrix.GetLength(1); j++)
                {
                    Console.WriteLine(iMatrix[i,j]); // 모든 요소에 접근
                }
            }

        }
    }
}